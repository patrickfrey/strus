<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 2.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
	<link rel="icon" type="image/ico" href="images/strus.ico" />
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="description" content="Documentation of strus, a collection of C++ libraries for building a full-text search engine." />
	<meta name="keywords" content="fulltext search engine C++" />
	<meta name="author" content="Patrick Frey &lt;patrickpfrey (a) yahoo (dt) com&gt;" />
	<link rel="stylesheet" type="text/css" href="text-profile.css" title="Text Profile" media="all" />
	<title>Strus documentation</title>
</head>

<body>
<div id="wrap">
	<div id="content">
		<h1>Strus documentation</h1>
		<h2>Project organization</h2>
		<p class="description">
		The whole <i>Strus</i> universe is implemented in several subprojects hosted on 
		<a href="https://github.com/patrickfrey?tab=repositories">github</a>.
		Here is a list of its subprojects:
		<ol>
		<li><a href="https://github.com/patrickfrey/strusBase">strusBase</a>
			implements some helper functions as the common code base.
			It also defines the error buffer interface for buffering
			exception error messages. Exceptions cannot be thrown across borders of 
			dynamically linked libraries and modules. All other Strus projects depend 
			on strusBase.</li>
		<li><a href="https://github.com/patrickfrey/strus">strus</a>
			provides the interface to the storage and the query processing of the search engine.
			It also provides the default key value store database connector (to LevelDB).</li>
		<li><a href="https://github.com/patrickfrey/strusAnalyzer">strusAnalyzer</a>
			provides document and query analysis for transforming content
			into retrievable items.</li>
		<li><a href="https://github.com/patrickfrey/strusTrace">strusTrace</a>
			implements all methods of the strus analyzer and core as a proxy
			that logs its calls made via a specified interface. The whole
			mechanism is implemented as own aspect without touching any
			code of the core or the analyzer. The produced trace can be
			visualized as call tree or the logs can be processed as a readable
			dump.</li>
		<li><a href="https://github.com/patrickfrey/strusPattern">strusPattern</a>
			provides an implementation of the analyzer pattern matching interface
			with a lexer based on the Intel hyperscan library.</li>
		<li><a href="https://github.com/patrickfrey/strusVector">strusVector</a>
			provides an implementation of the strus vector storage interface
			with a search for the nearest vectors implemented with brute force LSH (Local Sensitive Hashing).</li>
		<li><a href="https://github.com/patrickfrey/strusModule">strusModule</a>
			provides the loading of search engine components from dynamically 
			loadable modules. (depends on strus and strusAnalyzer)</li>
		<li><a href="https://github.com/patrickfrey/strusRpc">strusRpc</a>
			provides a proxy interface for strus objects residing on a server via RPC.
			If you want to use strus in a web server context, where loading modules by
			another instance than the web server itself is not allowed or at least 
			not recommended, you should access strus via RPC or a similar mechanism.
			(depends on strus, strusAnalyzer, strusModule)</li>
		<li><a href="https://github.com/patrickfrey/strusUtilities">strusUtilities</a>
			provides some command line programs to access the search engine.
			(Depends on strusModule and strusRpc</li>
		<li><a href="https://github.com/patrickfrey/strusBindings">strusBindings</a>
			provides language bindings to use <i>strus</i> with other
			programming languages like <i>PHP</i>, <i>Python</i>, <i>Lua</i>, etc...  
			(Depends on strusModule and strusRpc)</li>
		</ol>
		</p>

		<h2>Interface documentation</h2>
		<p class="description"><i>Strus</i> provides two classes of interfaces with diametric objectives.
		One is the C++ interface that is the base of the implementation and the other
		is the interface for language bindings with implementations that wrap to the
		C++ interface.
		</p>
		<h3>C++ interfaces</h3>
		<ul>
		<li><a href="http://patrickfrey.github.io/strusBase/doc/doxygen/html/index.html">strus base</a>:
			Interface for common functions and interfaces</li>
		<li><a href="http://patrickfrey.github.io/strus/doc/doxygen/html/index.html">strus core</a>:
			Interface to storage and query evaluation</li>
		<li><a href="http://patrickfrey.github.io/strusAnalyzer/doc/doxygen/html/index.html">strus analyzer</a>:
			Interface to process documents and queries in strus.</li>
		<li><a href="http://patrickfrey.github.io/strusTrace/doc/doxygen/html/index.html">strus trace</a>:
			Interface for logging and inspecting method call traces for debugging or another kind of execution analysis.</li>
		<li><a href="http://patrickfrey.github.io/strusModule/doc/doxygen/html/index.html">strus module loader</a>:
			Interface to define strus components and to load them from dynamically loadable modules.</li>
		<li><a href="http://patrickfrey.github.io/strusRpc/doc/doxygen/html/index.html">strus RPC client</a>:
			Interfaces for strus RPC client and server</li>
		<li><a href="http://patrickfrey.github.io/strusUtilities/doc/doxygen/html/index.html">strus program loader</a>:
			Functions to instantiate strus components from source</li>
		</ul>

		<h3>Language bindings</h3>
		<p class="description">Bindings are available for Lua, Python3 and PHP7. To enable the language bindings for Python and PHP
		you have to build strusBindings (or strusAll) with cmake -DWITH_PHP=YES, resp. with -DWITH_PYTHON=YES. The language bindings
		are referenced as "strus". Currently there are not many tutorials available. You can have a look at the tests (
		for <a href="https://github.com/patrickfrey/strusBindings/tree/master/tests/php7">PHP</a>,
		<a href="https://github.com/patrickfrey/strusBindings/tree/master/tests/lua">Lua</a>,
		<a href="https://github.com/patrickfrey/strusBindings/tree/master/tests/python3">Python</a>) for examples.
		</p>

		<h2>Functions documentation</h2>
		<p class="description">When writing an application with <i>Strus</i>, you have various
		functions of a different kind at your hands. You can write your functions in C++ and load
		them dynamically into your application. But there exist also a lot of predefined
		functions in strus. You find a complete list of the built-in functions of the core
		and the analyzer <a href="builtin_functions.htm">here</a>.
		</p>

		<h2>Command line tools documentation</h2>
		<p class="description">You do not need the command line tools of <i>strus</i>. 
		All functionality is accessible with the API.<br/>
		But there exist a lot of command line tools helpful for access and maintenance of
		a <i>strus</i> storage. A list of the standard command line tools and their documentation can be found
		<a href="utilities.htm">here (utilities)</a>.
		</p>
		<h2>Developer documentation</h2>
		<h3>Programming guidelines</h3>
		<p class="description">The programming guidelines contributors should respect, can be 
		found <a href="guidelines.htm">here</a>. Suggestions for strenghtening these
		rules are welcome.</p>

		<h3>Writing Strus extension modules in C++</h3>
		<h4>Strus core</h4>
		<p class="description">The Strus core can be extended with dynamically loadable modules
		with weighting functions, summarizers and posting join operators written in C++.
		<a href="http://www.codeproject.com/Articles/1072683/How-to-extend-a-Strus-search-engine-with-new-funct">This codeproject article</a>
		writes about the expandability of Strus and tries to explain the basic models and concepts 
		used in the query evaluation.</p>
		<h4>Strus analyzer</h4>
		<p class="description">
		You can also extend the Strus analyzer with own dynamically 
		loadable modules with functions written in C++. A codeproject article about the expandability 
		of the Strus analyzer is planned. Here is for now a short list of components you can write 
		as dynamically loadable analyzer modules for Strus:
		<ol>
		<li><b>Segmenter</b> <br/> You can define your own segmenters for the document formats you need to process.</li>
		<li><b>Tokenizer</b> <br/> You can define your own tokenizers splitting the document segments into tokens.</li>
		<li><b>Normalizer</b> <br/> You can define your own normalizer functions to produce the retrievable items from the document tokens for the storage and the query.</li>
		<li><b>Aggregator</b> <br/> You can define your own aggregator functions to produce some statistical values from the document structure after analysis.</li>
		</ol>
		</p>
	</div>
</div>
</body>
</html>

